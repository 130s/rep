REP: 110
Title: SCM-like rosinstall command structure
Version: $Revision$
Last-Modified: $Date$
Author: Thibault Kruse <kruset@in.tum.de>
Status: Draft
Type: Informational
Content-Type: text/x-rst
Created: 11-Jun-2011
Post-History: 11-Jun-2011, 10-Aug-2011

Table of Contents
=================

#. Abstract_
#. Specification_
#. Use-cases_
#. Analysis_
#. Rationale_
#. Motivation_
#. Compatibility_
#. Design-Alternatives_
#. Reference-implementation_
#. References_
#. Copyright_


.. _Abstract:

Abstract
========

This REP changes and extends the rosinstall [1]_ command-line
interface to a command-based syntax.  The command-based syntax is
inspired by SCM tools like ``svn``, ``git``, and ``hg`` as well as
several other ros commands like rosnode or rosservice, and is intended
to improve the usability of rosinstall as well as expose more
functionality.  Common use cases of rosinstall are described and
compared with the proposed changes.

.. _Specification:

Specification
=============

Command-line syntax
-------------------

The name "rosinstall" does not fit into an SCM like tool as it
contains a verb "install" in its name, which is confusing. The name
rosws for rosworkspace is a suggestion based also on other activities
around rosinstall. (see
https://code.ros.org/lurker/message/20110711.160222.666ecfe4.en.html)

So in this section, the syntax will be shown using the rosws name,
whereas the rest of the document will not refer to the new name.

.. _install:

rosws install PATH [URI]+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This command can initialize or update a rosinstall environment.

The command merges new entries (command line or changed in
.rosinstall) with existing entries (if a .rosinstall is present). The
strategy is to replace existing entries rather than adding whenever
possible. This is the case when an existing and a new entry have the
same target path, the same SCM type, and a similar SCM configuration
(e.g. same URI root).

The strategy fails whenever there are two entries with the same target
path but replacing is impossible with the strategy above.

When successfull, the command will append the new entries to the end of the
``.rosinstall`` and regenerate the setup.* files.

URI can be a path to a rosinstall file, to a local directory containing a ``.rosinstall``.

The command will fail when there are entries with duplicate target paths.

This will fail with an error when new entries are duplicates of existing entries
with respect to target-path but not to SCM information. Exact duplicates will be dropped.

Finally the command performs an update, with the same semantics as
update_, so the command also has the all options update_ provides.

Options:


--continue-on-error   Continue despite checkout errors
--delete-changed-uris
                        Delete the local copy of a directory before changing
                        uri.
--abort-changed-uris  Abort if changed uri detected
--backup-changed-uris=BACKUP_CHANGED
                        backup the local copy of a directory before changing
                        uri to this directory.

Options retain their semantics from current rosinstall.

--no-update        Only regenerate files based on changes in rosinstall
  or additional URIs, without attempting to fetch updates.

.. _check:

rosws check PATH
~~~~~~~~~~~~~~~~~~~~~

This use case deals with a user having made changes to either of the ``.rosinstall``
or setup.* files, or to any directory mentioned in the ``.rosinstall``.
The command first checks the semantic validity of the ``.rosinstall`` and then checks the
setup files, the current environment, and all directories for compliance with the
contents of the ``.rosinstall``. Defects may be listed or repaired interactively.

Causes for errors are:

----

Duplicate target-path of local-names with same vcs type details
 (and this also includes "home/user/workspace/foo" being the same as "~/workspace/foo" and "./foo")

Severity:
  warning
Repair:
  Offer to keep one.
  Should warn as this could be a case where the user intended something else.

----

Duplicate target-path of local-names, with different vcs type details

Severity:
  error, as results of other commands become undefined
Repair:
  Offer to keep one

----

Missing ROS_ROOT.

Severity:
  error, as results of other commands become undefined
Repair:
  Offer to specify ROS_ROOT

----

Duplicate ROS_ROOT (e.g. cturtle and diamondback).

Severity:
  Warning
Repair:
  Offer to delete one

----

setup.sh generated ROS_PACKAGE_PATH not as ``.rosinstall`` specifies

Severity:
  Error, as changes would be overwritten by other commands
Repair:
  Offer to either apply path from setup.sh or from ``.rosinstall``

----

$ROS_ROOT in setup.sh different from $ROS_ROOT that follows from ``.rosinstall``

Severity:
  Error, as changes would be overwritten by other commands
Repair:
  Offer to either apply path from setup.sh or from ``.rosinstall``

----

ROS_ROOT not last in ROS_PACKAGE_PATH

Severity:
  Warning
Repair:
  offer to move it to back

----

Missing directories for entries in ``.rosinstall``

Severity:
  Warning
Repair:
  When SCM entries, offer to checkout. In any case offer to remove entry

----

Different versions for SCM entries in ``.rosinstall`` and actual directory

Severity:
  Warning
Repair:
  Update to specified version, update version in entry, remove version information from entry

----

Missing SCM directories (.svn, .git, etc) for SCM entries in ``.rosinstall``

Severity:
  Warning
Repair:
  None

----

The tool may merely report errors as roswtf, or provides repair actions.

The functionality will also serve for most other commands, as a sane
current environments should be a prerequisite for any kind of update.
The severity indicates whether other commands should fail or just report a warning.


.. _info:

rosws info PATH
~~~~~~~~~~~~~~~~~~~~

This serves to explain the current environment to the novice user, and provide an overview of it.
It is supposed to give an explained overview of the environment and its state. In the
reference implementation it lists the interpreted ROS_ROOT, and then the paths in the
ROS_PACKAGE_PATH in their order, as well as providing status information about the local
directories (whether they exist, and whether their current version matches the ``.rosinstall``)

Options:

--data-only  just the data, no headers or text
--no-root   does not print ROS_ROOT
--no-pkg-path  does not print ROS_PACKAGE_PATH

These options are mainly intended to allow scripting based on
rosinstall. More no-... options may become available in the future as
more information becomes available

.. _status:

rosws status PATH
~~~~~~~~~~~~~~~~~~~~

This command batch-calls SCM status. The output is the concatenation
status commands for all versioned entries.

Options:
-- untracked  also shows untracked files

.. _diff:

rosws diff PATH
~~~~~~~~~~~~~~~~~~~~

This command batch-calls SCM diffs. The output is the concatenation
diff commands for all versioned entries.

Such a feature was suggested on ros-developers. The reference implementation
shows how this could be done. However the solution is neither very
robust nor flexible for SCM diff options.

There is room for ambiguity when the version specified in the ``.rosinstall`` does not match
the version in the directory.
A warning should be given on stderr at least.


.. _snapshot:

rosws snapshot PATH filename
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Maintains current rosinstall --generate-versioned-rosinstall semantics.
A rosinstall-like yaml file is created where all SCM entries have version information.



Analysis
========

.. _Use-cases:

Use cases
---------

The following are a list of use cases for rosinstall.  U1-U6 are based on use cases described in the rosinstall documentation [1]_.

.. _U1:

U1: Create a new environment based on an existing ros installation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

E.g. Developing on top of boxturtle shared install

``rosinstall ~/workspace /opt/ros/boxturtle http://www.ros.org/rosinstalls/wg_boxturtle_devel.rosinstall``

.. _U2:

U2: Create a new environment based on a rosinstall file only
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

E.g. Full source checkout

``rosinstall ~/workspace http://www.ros.org/rosinstalls/boxturtle_pr2all.rosinstall``

.. _U3:

U3: Create a new environment with an additional stack
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

E.g. Developing a stack against a full tree

``rosinstall ~/workspace http://www.ros.org/rosinstalls/boxturtle_pr2all.rosinstall my_stack.rosinstall``

.. _U4:

U4: Adding more entries to an existing workspace
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

E.g. Adding a rosinstall layout to an existing workspace

``rosinstall ~/workspace http://www.ros.org/rosinstalls/wg_boxturtle_devel.rosinstall``

.. _U5:

U5: Updating a rosinstall tree
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``rosinstall ~/workspace``

.. _U6:

U6: Changing the version of a specific stack
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can manually edit the file ``.rosinstall`` in a rosinstall managed workspace and then call ``rosinstall ~/workspace``.

.. _U7:

U7: Overlaying a released ROS package with the sources
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

e.g. taking the sources from trunk, using ``roslocate``

``roslocate info common_msgs | rosinstall add .``

Not to be supported in this REP, see comment by Ken and rosworkspace, meaning user has to checkout manually and call rosinstall add

.. _U8:

U8: Rearranging the order of entries in the ``ROS_PACKAGE_PATH``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can manually edit the file ``.rosinstall`` in a rosinstall managed workspace and then call ``rosinstall ~/workspace``

.. _U9:

U9: Removing directories from the ``ROS_PACKAGE_PATH``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can manually edit the file ``.rosinstall`` in a rosinstall managed workspace and then call ``rosinstall ~/workspace``

.. _U10:

U10: Checking the validity of the current ROS environment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

using diverse file exploration tools

.. _U11:

U11: Creating a snapshot of the configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``rosinstall ~/workspace --generate-versioned-rosinstall=GENERATE_VERSIONED``

.. _U12:

U12: Modifying the current configuration according to a snapshot
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

``rosinstall ~/workspace snapshotfile.rosinstall``


.. _U13:

U13: Basing the environment on a different ``ROS_ROOT``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

manually edit ``.rosinstall``
``rosinstall ~/workspace``

Comment by Ken:
Now that ros is
separated into ros and ros_comm stacks, changing ros isn't effective
and can put you in a bad state.  Personally, more common for me is
changing distro from diamondback<->unstable.  That is much more
difficult to automate with rosinstall as it can be very install
specific (e.g. debian underlay).

Therefore not implementing the usecase in this REP, meaning user has
to manually modify .rosinstall and call rosinstall

.. _U14:

U14: Create a new environment based on an existing one
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Previously
``rosinstall /path/to/other/workspace``

The current behavior of rosinstall is to copy the entries of the
foreign .rosinstall to the current .rosinstall. However, scm entries
are converted into non-scm entries in the process.

.. _U15:

U15: Moving a local stack to a different location
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The user has some ROS stack in directory foo, and want to move that
stack to directory bar. This means moving the files as well as
updating the .rosintall and the setup.sh.

.. _U16:

U16: User makes arbitrary changes to .rosinstall
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A poweruser can change path, version, scm, entry order, etc. in his
rosinstall.  In some cases he then just wants his setup.sh file to be
regenerated, in other cases he may want to update directories to
specific revisions.

.. _U17:

U17: User wants to see combined diff
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When the user works on several interdependent stacks, he wants to
create a unified diff of those stacks against their checked-out
revision.

.. _U18:

U18: User wants to status of scm files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When the user works on several interdependent stacks, he wants to
see what files are currently in a changed status in their repsctive SCM.


.. _Analysis:

Use-case analysis
-----------------

All rosinstall use-cases deal with a user trying to maintain a ROS environment on a local machine.
A ROS environment means the assignment of values to ``ROS_PACKAGE_PATH``, ``PATH``, ``PYTHONPATH``
and ``ROS_MASTER_URI``, as well as further changes to support ROS toolchains.

Given the description, a user of rosinstall needs to be aware of the following artifacts:
- any ``.rosinstall`` file in the current directory
- the setup.* files in the current directory
- the state of local directories
- the information contained in other rosinstall files

As a user is free to manipulate entry in the configuration files, a major cause for errors are mistakes during such modifications.
As an automated tool, rosinstall currently only knows of this:
The user may have changed the rosinstall file, the user may have provided additional locations,
now a new ``.rosinstall`` file may have to be merged with additional locations, and new setup.* files
have to be generated.

An early attempt for this REP tried to provide different commands for
different use-cases, such as init, remove, add, update. However the
code for all those commands had in all cases to remain largely similar
to cope with the situation where a user had manually changed his or
her .rosinstall, or filesystem.

The list of use-cases thus only displays the range of distinctive
usages of rosinstall, but does not provide help into splitting up the
main functionality into many small commands.

T1: Table of use cases and commands
-----------------------------------


==== =========  ======= ====== ========== ======= =========
 UC  install_   check_  info_   snapshot_  diff_   status_
==== =========  ======= ====== ========== ======= =========
U1_      x    
U2_      x    
U3_      x    
U4_      x    
U5_      x      
U6_      x      
U7_      x      
U8_      x     
U9_      x      
U10_                x       x
U11_                              x
U12_     x    
U13_     x      
U14_     x    
U15_     x      
U16_     x       
U17_                                        x
U18_                                               x
==== =========  ======= ====== ========== ======= =========



T2: Table of init/update/merge combinations
-------------------------------------------

the current rosinstall command combinations can be analyzed as
rosinstall target-dir URI*
Where the target-dir can be empty or contain a .rosinstall,
or a manually changed ".rosinstall*" and all other arguments can be:
local-dir(-ros): a local directory optionally being a ROS installation (/opt/ros/...)
rosinstall-file(-ros): a rosinstall file optinally referencing a ROS installation
.rosinstall-dir: a dir with a .rosinstall


============ =================== =============================== ==========================
target-dir   URI                  Effect                         new command
============ =================== =============================== ==========================
empty                            Error
empty        local-dir           Error
empty        rosinstall-file     Error
empty        local-dir-ros       U1_, init from install          install
empty        rosinstall-file-ros U2_, init from file             install
empty        .rosinstall-dir     U13_, init from other           install
empty        anything ros + URI+ U3_, init+add                   install
.rosinstall                      U5_, update                     install
.rosinstall  local-dir           U4_, add                        install
.rosinstall  rosinstall-file     U4_, add, U12_, apply           install
.rosinstall  local-dir-ros       not specified, conflict
.rosinstall  rosinstall-file-ros U4_, U12_ add with conflict     install
.rosinstall  .rosinstall-dir     U4_, U12_ add with conflict     install
                                 U10_, U17_, U18_                check, diff, status
.rosinstall*                     all other usecases              install
.rosinstall* anything                                            install
============ =================== =============================== ==========================

The table shows that most original cases are covered by the new
command "rosws install".
Not in the table are the commands "info, snapshot, check"


.. _Motivation:

Motivation
==========

The rosinstall tool, while useful, has a command-line syntax that
can be difficult for beginners of ROS to become familiar with. Users
who are intimidated by rosinstall can resort to manually creating
source trees and maintaining ``ROS_PACKAGE_PATH`` by hand.  Improving
the usability of the rosinstall tool can improve the ROS experience
for beginner users as well as introduce advanced users to more
powerful features.

.. _Rationale:

Rationale
=========

The extended command structure allows to perform a broader range of
operations concerning multiple SCMs, and mere investigative commands.

Breaking down functionality helps self-explaining of the tool.

Also this makes it easier to extend rosinstall with other functions, and
to use rosintall in scripts (e.g. provide a curses/tk-based rosinstall
ui).

Another problem are the --options. Those are only required in specific
use-cases, but in the current solution the user may provide them in
any case, and thus the user will have difficulties to tell what his
choices for options are, given his intention. Having distinct commands
allows a help function to quickly tell the user what options are
available for his specific intention.

The SCM like structure also allows code completion to provide command
choices, which is a significant help for users when learning a new tool.

The vision of the source code is that it will one day in large parts
be moved out of rosinstall to provide ROS-independent functionality
for managing directories of mutliple SCMs. However the rosinstall
functionality of generating setup files for ROS environments will
remain important. Therefore a name change to rosws is suggested rather
than a ROS-independent name.


Names
-----

The current rosinstall command structure allows a command such as
rosinstall ~/workspace /opt/ros/diamondback ~/workspace2 ~/workspace/foo ~/download/temp.rosinstall

The intention of the user typing this cannot be inferred from the
command, nor can what the tool will do be inferred from the syntax.
The key idea is to have a syntax that allows the user to express a
specific intention and to understand what the tool will do.

The commands check, info, snapshot, diff, status should explain themselves.

The "install" command is somewhat ambiguous, as the user would need to
use it for multiple purposes of adding entries or modifying versions
of entries. However the different use-cases are algorithmically so
similar that own commands for each seem superflous.


.. _Compatibility:

Backwards Compatibility
=======================

The rosinstall setup files remain unchanged.

Current rosinstall syntax is:

::

  Usage: rosinstall PATH [<options> ...] [URI]...

  Options:
    --version             show program's version number and exit
    -h, --help            show this help message and exit
    -n, --nobuild         skip the build step for the ROS stack
    --rosdep-yes          Pass through --rosdep-yes to rosmake
    --continue-on-error   Continue despite checkout errors
    --delete-changed-uris
                          Delete the local copy of a directory before changing
                          uri.
    --abort-changed-uris  Abort if changed uri detected
    --backup-changed-uris=BACKUP_CHANGED
                          backup the local copy of a directory before changing
                          uri to this directory.
    --generate-versioned-rosinstall=GENERATE_VERSIONED
                          generate a versioned rosintall file

--generate-versioned-rosinstall is a single special case, which is replaced by ``rosinstall snapshot``.


This will be fulfilled by ``rosws install``.

The change in command syntax impacts rosinstall based tools such as the
new proposal for a rosworkspace.


.. _Design-Alternatives:

Design Alternatives
===================

rosinstall0.5
-------------

As originally developed by Tully Foote.

Commands are

``rosinstall PATH [options] [URIs]``
with a 4 Phase model, Merging, Checking out, Generating setup, bootstrapping ROS serving most use-cases
and  --generate-versioned-rosinstall being an exceptional command

Extended-options
----------------

Similar to the commands provided in the REP, some of the functionality could be provided by additional --options.

E.g.
rosinstall --info
rosinstall --check
rosinstall --diff
rosinstall --status

This is less useful for bash completion and focussed help.

SCM-like-explicit-path
----------------------

As initially suggested for this REP, all command require fist the path on which to work.

Commands are

``rosinstall <command> PATH [options]``
``rosinstall <command> PATH [options] [URIs]``


The SCM-like Designs are in line with the other ros tools. However, SCM tools usually drop the PATH argument and work in the current directory tree.

SCM-like-implicit-path
----------------------

Commands are ``rosinstall <command> [options]``.

The path refers to the first directory in ascending order starting
with '.' which has a .rosinstall (like git), or the current dir for "init".

Alternatively, all commands operate on the current dir.

While this provides clean semantics and reduced effort to type, the
requirement for the user to explicitly say where to perform and action
provides some certainty for the user that changes will be made only
where he wants them to be made.

SCM-like-extended-command-set
-----------------------------

The install command suggested provides support for several use cases
which could be further split up into different commands, e.g. "add"
and "apply". See Rejects_.

SCM-like-no-install-command
--------------------------

Commands are ``rosinstall <command> [options]``
except for the default action of init/adding/updating/merging, where command is
``rosinstall [options] [URIs]``

This helps work around the problem of finding a single self-explaing
command for init, install, add, update, merge and apply.

On the downside this requires some handling of the possible case of a
user naming his environment like one of the commands.

tar-like
--------

The tar command has an own way of building commands, however that way is not very suitable e.g. for helpful tab completion.


.. _Reference-implementation:

Reference implementation
========================

Reference implementation code located in git repo at:
http://code.in.tum.de/indefero/index.php//p/rosinstall2/

It includes fixes to rosinstall as suggested by patches in ROS tickets:

https://code.ros.org/trac/ros/ticket/3316 bugfix
https://code.ros.org/trac/ros/ticket/3520 bugfix
https://code.ros.org/trac/ros/ticket/3521 enhancement

It requires applied patches to vcstools of tickets:

https://code.ros.org/trac/ros/ticket/3555 enhancement
https://code.ros.org/trac/ros/ticket/3559 bugfix
https://code.ros.org/trac/ros/ticket/3560 bugfix

.. _Rejects:

Rejects
=======

Ideas for rosinstall commands that were dropped for this REP, but may
become interesting later:

- rosws overlay: looks up repository location based on roslocate and rosinstalls it

- rosws change-ros: allows to move from e.g. /opt/ros/diamondback to ~/ros or /opt/ros/cturtle

- rosws mv: Moves local checked out stack to different location on filesystem

- rosws reorder: changes the order of stacks in ROS_PACKAGE_PATH

- rosws change-version: changes the desired version of an SCM based local stack

- rosws check --repair: Attempts to (interactively) fix inconsistencies such as duplicate paths

- rosws regenerate: Generates setup files but does not attempt to update SCM based entries

- rosws init: first time command demands a ROS root to be specified. too similar to install

- rosws update: merges new entries and runs update on all scm based entries. too similar to install

- rosws remove: removes an entry from .rosinstall. Better be done by hand

Those commands make the initial version of the REP more complex to
discuss and harder to implement, therefore they are left out.

.. _References:

References
==========

.. [1] rosinstall
   (http://www.ros.org/wiki/rosinstall)

.. _Copyright:

Copyright
=========

Copyright (c) 2011 by Thibault Kruse. This material may be distributed only subject to
the terms and conditions set forth in the Open Publication License, v0.1 or later
(the latest version is presently available at http://www.opencontent.org/openpub/).



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:

