REP: 127
Title: Specification of package manifest format
Version: $Revision: 180 $
Last-Modified: $Date: 2012-09-12 16:00:00 -0800 (We, 12 Sep 2012) $
Author: Dirk Thomas
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 12-Sep-2012
Post-History: 18-Sep-2012

Table of Contents
=================

#. Abstract_
#. Motivation_
#. Rationale_
#. Data_
#. Concerns_
#. Specification_
#. References_
#. Copyright_


Abstract
========

This REP specifies the format for package manifest used starting with
Groovy when packages are getting packaged.  This is only relevant for
packages which use the new buildsystem ``catkin``.  The filename is
``package.xml`` which will replace ``stack.xml`` and
``manifest.xml``.


Motivation
==========

With the step towards packaging packages the information contained in
the both files ``stack.xml`` and ``package.xml`` are being merged.

The file contains different kind of information:

 * core data (i.e. the name)
 * dependencies to other packages and system dependencies
 * meta-information (i.e. the author and website)
 * packaging information (i.e. the version)


Rationale
=========

A new filename replacing the existing ones
------------------------------------------

Instead of modifying the semantic and content of the old files a new
filename is chosen to make it possible to distinguish old and new
packages without parsing the content of the xml file.

One file per package with all the information
---------------------------------------------

Each package has one ``package.xml`` which contains all necessary
information (instead of having multiple separate files with
semantically grouped informations).  This design decision is based on
the need to utilize these information in several tools (i.e.
buildfarm, wiki) which should only require to fetch one file from a
repository.

Catkin-only - no rosbuild information inside
--------------------------------------------

The file only specifies information needed for a ROS ecosystem which
is entirely based on ``catkin``.  Any additional information
necessary for backward compatibility with ``rosbuild`` is kept
separate (i.e. in the legacy ``manifest.xml`` files).  This enable to
easily remove the legacy files in the future.

Store normalized data
---------------------

All data is stored in atomic units to enable automated processing.
I.e. names and email addresses are not mixed in a single text field
but separated in related tags and attributes.

Tags vs. attributes
-------------------

While plain text information can be stored in either attributes or
tags the later is preferred for readability reasons.

Additional (most times optional) information is stored in attributes
of the related tag instead of grouping multiple tags inside a parent
tag.


Data
====

<package>
---------

The ``<package>`` tag is the unique top-level tag in a
``package.xml`` file.  All other tags are nested under this.

Attributes
''''''''''

  ``format="NUMBER"`` *(optional)*
  Specifying the version of the ``package.xml`` format being used.
  If it is not set the default format ``1`` is assumed.  This will be
  used to detect future specification changes.

Required Tags
-------------

The required set of tags in a ``package.xml`` file provides basic
meta data about the package:

 * `\<name\>`_
 * `\<version\>`_
 * `\<description\>`_
 * `\<maintainer\> (multiple, but at least one)`_

Optional Tags
-------------

Meta information
''''''''''''''''

We strongly recommend the use of the ``<url>`` tag to point users
to a website and/or bug tracker where they can find more information
or give feedback about the package.  The website is most commonly a
wiki page on ROS.org so that users can easily find and update
information about the package.

 * `\<url\> (multiple)`_

Furthermore authors, license and copyright information can be stated:

 * `\<author\> (multiple)`_
 * `\<license\> (multiple)`_
 * `\<copyright\>`_

Dependencies
''''''''''''

The dependencies to other packages and system packages are described
with:

 * `\<depend\> (multiple)`_

Various
'''''''

Since packages need to embed additional meta data for various reasons
(message generators, plugin discovery, etc.) all of these *dynamic*
information are stored under a single tag:

 * `\<export\>`_

Example
-------

::

  <package>
    <name>my_package</name>
    <version>1.2.3</version>
    <description brief="ROS communications-related libraries and tools">
      ROS communications-related packages, including core client libraries (roscpp, rospy, roslisp) and graph introspection tools (rostopic, rosnode, rosservice, rosparam).
    </description>
    <maintainer email="someone@example.com">Someone</maintainer>

    <url type="website">http://wiki.ros.org/my_package</url>
    <url type="bugtracker">http://www.github.com/my_org/my_package/issues</url>

    <author>John Doe</author>
    <author email="jane.doe@example.com">Jane Doe</author>
    <license>BSD</license>
    <license>LGPL</license>
    <copyright>OSRF</copyright>

    <depend>catkin</depend>

    <depend build="" version_gte="1.1" version_lt="2.0">genmsg</depend>

    <depend build="">libboost-thread-dev</depend>
    <depend run="">libboost-thread</depend>

    <depend test="">gtest</depend>

    <depend conflict="">my_old_package</depend>

    <export>
        ...
    </export>
  </package>


<name>
------

The name of the package consisting only of lower case alphanumeric
characters and underscores and must start with a letter [1]_.  The
package name must be unique in the ROS ecosystem.  It does not need
to be identical with the folder name where it is checked out to, but
it is a good habit to use the same name for the folder.

Reasons for naming convention
'''''''''''''''''''''''''''''

Package names are used in various contexts:
 * namespaces
 * variables
 * part of a binary package name (i.e. Debian, Fedora)

  * http://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Source
  * http://fedoraproject.org/wiki/Packaging:NamingGuidelines#Common_Character_Set_for_Package_Naming

The ROS package names must be mapped to these conventions without
generating collision.  Therefore only lower case letters (a-z),
numbers (0-9) and one delimiting character (_) can be used.  The
additional restriction that the first character can only be a letter
is derived from the fact that some language do not allow this for
namespaces/packages.


<version>
---------

The version number of the package in the format
``MAJOR.MINOR.PATCH`` where each part is numeric only.

Attributes
''''''''''

  ``abi="FORMAT-TBD"`` *(optional)*
  Specifying an ABI version number.

  The packages generated are version-locked against the exact ABI
  version of packages it depends on (if not specified the normal
  version number).  When increasing the version number while keeping
  the same ABI version all dependent packages do not need to be
  rebuilt.


<description>
-------------

The description of the package. It can consist of multiple lines and
may contain XHTML.  But depending on where the description is used
XML tags and multiple whitespaces might be stripped.

Attributes
''''''''''

 ``brief="brief text"`` *(optional)*
  One-line summary of the package description. Useful where the
  package name is not sufficiently descriptive and the description is
  to verbose to be displayed.


<maintainer> (multiple, but at least one)
-----------------------------------------

The name of the person maintaining the package.

Attributes
''''''''''

 ``email="name@domain.tld"`` *(required)*
  Email address of the maintainer.


<url> (multiple)
----------------

The URL to a website, a bug tracker or anything else for the package.

Attributes
''''''''''

 ``type="TYPE"`` *(optional)*
 The type should be one of the following identifiers: ``website``
 (default), ``bugtracker`` and ``repository``.


<author> (multiple)
-------------------

The name of the person who is an author of the package.

Attributes
''''''''''

 ``email="name@domain.tld"`` *(optional)*
  Email address of author.


<license> (multiple)
--------------------

Name of license for this package, e.g. BSD, GPL, LGPL.  In order to
assist machine readability, only include the license name in this
tag.  For multiple licenses multiple separate tags must be used.  For
any explanatory text about licensing caveats, please use the
``<description>`` tag.

Most common open-source licenses are described on the
`OSI website <http://www.opensource.org/licenses/alphabetical>`_.

Commonly used license strings:

 - Apache 2.0
 - BSD
 - Boost Software License
 - GPLv2
 - GPLv3
 - LGPLv2.1
 - LGPLv3
 - MIT 
 - Mozilla Public License Version 1.1
 - wxWindows
 - ZLib
 

<copyright>
-----------

Copyright information which is integrated into the packages.

Example
'''''''

::

    <copyright>OSRF</copyright>


<depend> (multiple)
-------------------

Declares a ROS dep key that this package depends on.

Attributes
''''''''''

 *Type of dependency*

 The type of the dependency is defined with the following attributes.
 Multiple attributes can be specified.  If no attribute is specified
 the behavior is the same as if ``build`` and ``run`` would be set
 (since it is expected that this is the most common use case).

 ``build=""`` *(optional)*
 When this attribute is present the ROS dep key is used as a
 build-time dependency.

 ``buildtool=""`` *(optional)*
 When this attribute is present the ROS dep key is used as a
 build-time dependency.  But it identifies a tool which is executed
 during the build process.  For cross-compilation it is necessary to
 distinguish them from normal build dependencies which the package is
 linked against (they need to be for the target architecture) and
 tools which are use on the build architecture to compile the
 package.

 ``run=""`` *(optional)*
 When this attribute is present the ROS dep key is used as a run-time
 dependency.

 ``test=""`` *(optional)*
 When this attribute is present the ROS dep key is used as an
 additional dependency to run tests.

 The ``build`` and ``buildtool`` dependencies are used to determine
 the build order of multiple packages.

 While ``build``, ``buildtoold`` and ``run`` define independent sets
 of dependencies ``test`` dependencies are only additive and specify
 only what used in addition to the other dependencies.

 *Additional relationship*

 The following additional relationships can be defined:

 ``conflict=""`` *(optional)*
 When this attribute is present the ROS dep key states a conflicting
 package which can not be installed at the same time.  This maps to
 ``conflicts`` for both ``dpkg`` and ``rpms``.

 ``conflict=""`` *(optional)*
 When this attribute is present the ROS dep key states a package
 which is replaced by this one.  This maps to ``Replaces`` for
 ``dpkg`` and ``Obsoletes`` for ``rpms``.

 *Version specific dependency / relationship*

 All dependencies and relationships may restrict their applicability
 to particular versions.  For each comparison operator an attribute
 can be used.  Two of these attributes can be set at the same time to
 describe a version range.

 ``version_lt="VERSION"`` *(optional)*
 The dependency to the package is restricted to versions less than
 the stated version number.

 ``version_lte="VERSION"`` *(optional)*
 The dependency to the package is restricted to versions less or
 equal than the stated version number.

 ``version_eq="VERSION"`` *(optional)*
 The dependency to the package is restricted to a version equal than
 the stated version number.

 ``version_gte="VERSION"`` *(optional)*
 The dependency to the package is restricted to versions greater or
 equal than the stated version number.

 ``version_gt="VERSION"`` *(optional)*
 The dependency to the package is restricted to versions greater than
 the stated version number.

 For a detailed explanation how these relationships are utilized see
 [4]_ and [5]_.


<export>
--------

It serves as a container for any kind of additional information
various packages and subsystem need to embed to fulfill their goal.
To avoid potential collisions packages must use their package name as
the tag name inside of the export block.  The content of that tag is
up to the package to define and utilize.

The existing tags for use cases like exporting plugins for
``pluginlib`` etc. will remain as-is.

The following tags will list some additional tags which are necessary
to fulfill specific task in the area of package and message
generation.

<architecture_independent/>
'''''''''''''''''''''''''''

The empty tag is used to indicate that a package is architecture
independent and therefore does not contain any architecture specific
code.

<message_generator>
'''''''''''''''''''

The content defines the *identifier* for the language bindings
generated by this package, i.e. in ``gencpp`` this is set to ``cpp``.

<meta_package/>
'''''''''''''''

The empty tag is used to indicate that a package is a meta-package
which implies that it does not have a ``CMakeLists.txt`` and
therefore no content of any kind.  This information is necessary for
the ROS wiki to show the relationship between these meta packages and
other packages.


Concerns
========

Modification to previous specifications
---------------------------------------

 * Authors are now split into authors and maintainers.

  * Multiple persons and their emails are specified in separate tags
    and attributes.
  * Authors are now optional.
  * But at least one maintainer is now required.

 * The license information is now optional.

 * Multiple ``url`` tags can be specified and the ``type``
   attributes gives them semantic meaning.

 * The former ``depend`` and ``rosdep`` have been unified, but also
   split into various types of dependencies.

 * The ``export`` tag:

  * The ``cpp`` tag has been dropped, since this functionality is
    handled by catkin.
  * The ``roslang`` tag has been dropped, since this functionality is
    handled by catkin.

 * The ``logo`` tag has been dropped.
 * The ``review`` tag has been dropped, these information will be
   stored on the website of that package.
 * The ``versioncontrol`` tag has been dropped.

Backwards Compatibility
-----------------------

All tools currently utilizing ``stack.xml`` and ``manifest.xml`` are
updated to work with ``package.xml`` files.

For backward compatibility the ``manifest.xml`` is kept to provide
information necessary for ``rosbuild`` to work (namely exporting
compiler and linker flags).  For catkin packages these files will be
auto generated.

Future enhancements
-------------------

Additional meta information can be easily added within the ``export``
tag in the future if necessary.

Furthermore new features related to the infrastructure can be
specified and integrated using additional tags and attributes:


Specification
=============

A schema to validate a ``package.xml`` file against will be provided.


Implementation
==============

A reference implementation will be developed as soon as the
specification is fixed.  It will likely be integrated into
``rospkg``.

Affected tools
--------------

List of tools affected by the specification (which is very like not
complete):

 * bloom
 * buildfarm
 * catkin
 * roscd
 * rosdep
 * rosdoc
 * roslaunch
 * roslib
 * rospack
 * rospkg
 * rosrun
 * rosstack

Several tools are affected by the transition from packaging packages
instead of stacks and not really by the specification of the format
for the package information.


References
==========

.. [1] Naming conventions
   (http://www.ros.org/wiki/Naming)
.. [2] Manifest
   (http://ros.org/wiki/Manifest)
.. [3] Stack Manifest
   (http://www.ros.org/wiki/Stack%20Manifest)
.. [4] Declaring relationships between packages (Debian Policy Manual)
   (http://www.debian.org/doc/debian-policy/ch-relationships.html)
.. [5] Advances RPM Packaging (Fedora Documentation)
   (http://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/RPM_Guide/ch-advanced-packaging.html)

Copyright
=========

This document has been placed in the public domain.



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
